       INVERTED INDEX ASSIGNMENT

IMPLEMENTED A SIMPLE INVERTED INDEX FROM THE CORPUS using dictionary 

OVERVIEW:
1)PREPROCESS THE DATA  IN TEXT COLLECTION (STOPWORDS REMOVAL,STEMMING,TOKENISATION,REMOVING PANCTUATIONS etc.)

2) Creates an inverted index for looking up relevant documents for each word in the vocabulary of the document collection

RUNNING THE CODE:
FROM THE COMMAND LINE/TERMINAL:
                python invertedindex.py

DETAILED LIST OF FUNCTIONS IMPLEMENTED:

1) tokenise:
The function accepts the text data as a parameter and does the following operations: 
a)Removes the punctuations from the text data 
b)Removes numbers from the data 
c) Tokenizes the words from the text data

2)rem_stop_words:
             The function takes in tokenized words and removes stop wordsfrom it and the words which are smaller than 2 characters in length and returns a list of tokens
     
3)read_data:
          The function takes the path of the corpus and reads the contents of the files present in the directory  and returns a list of tuples of the following format – (document_id, data)

4)stemmed_tokens:
The function takes in a list of tokens and returns a list of stemmed words
Without using any inbuilt functions but using the stemming function


5)preprocess_data:
 The function takes a list of tuples generated by read_data and then performs the following functions: 
a)tokenizes and removes puntuations 
b) removes stop words 
c) stems words 
d) removes stop words after stemming and words shorter than 2 characters

6)frequency_words:
This function parses all the words from the document collection and returns a vocabulary of all the unique words from the collection

7)inverted_index:
This function takes in the data dictionary of preprocessed data, builds and inverted index and then returns a dictionary with key as each unique word from the document vocabulary and value having a list of documents where the word in present

8)vowel_or_consonant:
This function checks for a letter is a vowel or not. It returns true if it is vowel other wise it returns false

9)double_consonants:
It returns true if the word ends with two consonants other wise it will return false

10)o_form:
It returns true if the word ends with cvc , where the second c is not w,x or y

11)word_vowel_check:
It returns true if the word contains atleast one vowel other wise it returns false

12)check_mvalue:
It returns the count of vc in the given word that is nothing but the m value

13)check_m_0_replace:
Firstly it checks for the m value and if and only if value of m is grater than 0 . then it replaces the required substring to replace and returns the entire word

14) check_m_1_replace:
Firstly it checks for the m value and if and only if value of m is grater than 1 . then it replaces the required substring to replace and returns the entire word

15)step1a,step1b,step1c,step2,step3,step4,step5a,step5b:
These functions are executed according to the rules and follow the order

16)check_vc:
This fucntion takes the input word and converts into vc form where v is a vowel and c is a consonant

space complexity:
o(n) where n is the number of different words 

time complexity:
o(m + n) where m is the total number of files we have to read the data and n is nothing but the number of differnt words  a single add takes O(1) time as it increases O(n)